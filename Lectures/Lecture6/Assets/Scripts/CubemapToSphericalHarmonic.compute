// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeHarmonics

#define PI            3.14159265359f
#define TWO_PI        6.28318530718f
#define FOUR_PI       12.56637061436f
#define INV_PI        0.31830988618f
#define INV_TWO_PI    0.15915494309f
#define INV_FOUR_PI   0.07957747155f
#define HALF_PI       1.57079632679f
#define INV_HALF_PI   0.636619772367f

RWStructuredBuffer<float4> SH_0_1_r;
RWStructuredBuffer<float4> SH_0_1_g;
RWStructuredBuffer<float4> SH_0_1_b;

RWStructuredBuffer<float4> SH_2_r;
RWStructuredBuffer<float4> SH_2_g;
RWStructuredBuffer<float4> SH_2_b;

RWStructuredBuffer<float4> SH_2_rgb;

TextureCube<half4> _Env;
SamplerState samplerLinearRepeat;

uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

float Random(uint seed, float a, float b)
{
    return Random(seed) * (b - a) + a;
}
            
float3 SampleColor(float3 direction)
{   
    float4 tex = _Env.SampleLevel(samplerLinearRepeat, direction, 0);
    return tex.rgb;
}

float3 GetRandomVector(uint i, int samples)
{
    float cosBeta = Random(i, -1.0, 1.0);
    float alpha = Random(i + samples, 0.0, TWO_PI);
    float sinBeta = sqrt(1 - cosBeta * cosBeta);
    float3 w = float3(sinBeta * cos(alpha), sinBeta * sin(alpha), cosBeta);
    
    return w;
}

float GetHarmonicFunc(int l, int m, float3 w)
{
    float twoSqrtPI = 2 * sqrt(PI);
    float fourSqrtPI = 2 * twoSqrtPI;

    if (l == 0) {
        return 1 / twoSqrtPI;
    }

    if (l == 1) {
        if (m == -1) {
            return -sqrt(3) * w.y / twoSqrtPI;
        }
        if (m == 0) {
            return sqrt(3) * w.z / twoSqrtPI;
        }
        // if (m == 1)
        return -sqrt(3) * w.x / twoSqrtPI;
    }

    // if (l == 2)
    if (m == -2) {
        return sqrt(15) * w.y * w.x / twoSqrtPI;
    }
    if (m == -1) {
        return -sqrt(15) * w.y * w.z / twoSqrtPI;
    }
    if (m == 0) {
        return sqrt(5) * (3 * w.z * w.z - 1) / fourSqrtPI;
    }
    if (m == 1) {
        return -sqrt(15) * w.x * w.z / twoSqrtPI;
    }
    // if (m == 2)
    return sqrt(15) * (w.x * w.x - w.y * w.y) / fourSqrtPI;
}

float GetHarmonic(int l, int m)
{
    if (l == 2 && m == 0) {
        return sqrt(5) / (4 * sqrt(PI));
    }
    if (l == 2 && m == 2) {
        return sqrt(15) / (4 * sqrt(PI));
    }
    
    float3 w = float3(1.0, 1.0, 1.0);
    return GetHarmonicFunc(l, m, w);
}

float4 arrayToFloat4(float a[4])
{
    return float4(a[0], a[1], a[2], a[3]);
}

[numthreads(1024, 1, 1)]
void ComputeHarmonics(uint id : SV_DispatchThreadID)
{
    const int THREADS = 1024;
    const uint SAMPLES = 100;
   
    // See SH.shader for more details
    float results[7][4] = {
        {0, 0, 0, 0}, // SH_0_1_r
        {0, 0, 0, 0}, // SH_0_1_g
        {0, 0, 0, 0}, // SH_0_1_b
                  
        {0, 0, 0, 0}, // SH_2_r
        {0, 0, 0, 0}, // SH_2_g
        {0, 0, 0, 0}, // SH_2_b
                   
        {0, 0, 0, 0}, // SH_2_rgb
    };
    
    // Populate results buffer using monte-carlo method.
    // You can see the Random(i) function. Use it just as with the previous task.
    float C[3] = {PI, TWO_PI / 3, PI / 4};
    int lm_to_buffer_idx_1[3][5] = {
        // -2, -1,  0,  1,  2  = m
        {  -1, -1,  0, -1, -1 }, // l = 0
        {  -1,  0,  0,  0, -1 }, // l = 1
        {   3,  3,  3,  3, -1 }, // l = 2
    };
    int lm_to_buffer_idx_2[3][5] = {
        // -2, -1,  0,  1,  2  = m
        {  -1, -1,  3, -1, -1 }, // l = 0
        {  -1,  1,  2,  0, -1 }, // l = 1
        {   0,  1,  3,  2, -1 }, // l = 2
    };
    
    for (int l = 0; l < 3; l++) {
        for (int m = -l; m <= l; m++) {
            float3 L = float3(0.0, 0.0, 0.0);
            
            for (uint i = 0; i < SAMPLES; i++) {
                float3 w = GetRandomVector(i, SAMPLES);
                L += SampleColor(w) * GetHarmonicFunc(l, m, w);
            }

            L *= 4.0 /* * PI */ / SAMPLES;
            /*L *= INV_PI;*/
            L *= C[l];
            L *= GetHarmonic(l, m);
            
            if (l == 2 && m == 2) {
                for (int c = 0; c < 3; c++) {
                    results[6][c] = L[c];
                }
            }
            else {
                for (int c = 0; c < 3; c++) {
                    results[lm_to_buffer_idx_1[l][m + 2] + c][lm_to_buffer_idx_2[l][m + 2]] = L[c];
                }
            }
        }
    }
    
    // TASK: project light from _Env to spherical harmonic coefficients and store them in results[]
    
    SH_0_1_r[id] = arrayToFloat4(results[0]);
    SH_0_1_g[id] = arrayToFloat4(results[1]);
    SH_0_1_b[id] = arrayToFloat4(results[2]);
    
    SH_2_r[id] = arrayToFloat4(results[3]);
    SH_2_g[id] = arrayToFloat4(results[4]);
    SH_2_b[id] = arrayToFloat4(results[5]);    
    
    SH_2_rgb[id] = arrayToFloat4(results[6]);
}